Урок 64. Диалоги. AlertDialog. Список с множественным выбором
26 марта 2012
В этом уроке:
- формируем список с множественным выбором в диалоге

Урок будет аналогичен прошлому. Мы будем формировать в диалоге список с множественным выбором и определять какие элементы были выбраны (чекнуты). На этот раз мы сможем работать только с массивом и курсором. Дать диалогу адаптер не получится, нет соответствующего метода. Это особенности реализации.

Создадим проект:
Project name: P0641_AlertDialogItemsMulti Build Target: Android 2.3.3 Application name: AlertDialogItemsMulti Package name: ru.startandroid.develop.p0641alertdialogitemsmulti Create Activity: MainActivity

В strings.xml пропишем тексты:

main.xml:

DB.java:

Мы в таблице создаем числовое поле checked. По этому полю список диалога будет определять выделен элемент (значение = 1) или нет (0). Метод changeRec берет на вход позицию элемента в списке и boolean-значение, выделен элемент или нет, и меняет соответствующую запись в таблице.

MainActivity.java:
Разбираем код. Кроме массива строк data, нам нужен массив boolean[] chkd, который укажет диалогу, какие элементы списка надо будет сразу сделать выделенными. Будем выделять второй и третий.

В onCreate подключаемся к базе.

onclick – в зависимости от нажатой кнопки вызываем соответствующий диалог.

onCreateDialog – создаем вызываемый диалог, используя AlertDialog.Builder. Диалог может построить список, используя один из следующих объектов:
1) Массив строк. Используется метод setMultiChoiceItems. На вход подается массив строк, boolean-массив, определяющий выделенные элементов, и обработчик нажатия.
2) Курсор БД. Вызываем метод setMultiChoiceItems. Передаем туда курсор, имя поля выделения (данные о выделении элементов списка), имя поля с текстом (текст, который будет отображен в списке) и обработчик нажатия.
Кроме списка указываем только заголовок. В конце добавим кнопку ОК, создаем и возвращаем Dialog.
Для обоих способов создания используется методы с одинаковым названием setMultiChoiceItems, но с разными аргументами на вход.

myItemsMultiClickListener – обработчик нажатий на список, построенный из массива. Выводит в лог какой элемент был нажат и стал он выделенным или не выделенным. Реализует интерфейс OnMultiChoiceClickListener.

myCursorMultiClickListener - обработчик нажатий на список, построенный из курсора. Выводит в лог какой элемент был нажат и стал он выделенным или не выделенным. Также он соответствующим образом меняет данные в БД и обновляет курсор списка диалога. Т.к. если какой-то элемент выделили, мы должны в обработчике сбегать в БД, обновить соответствующую запись (поле checked) и обновить курсор. Ради интереса закомментируйте код этого обработчика – вы увидите, что галки в списке просто не ставятся.

myBtnClickListener – обработчик нажатия на кнопку. Получает из списка информацию о выделенных элементах и выводит ее в лог.

В onDestroy закрываем подключение к БД.

Все сохраним и запустим. Открываем диалог Items.

Видим, что галки проставились так, как мы указывали в массиве chkd. Если понажимать на пункты списка, лог показывает, какие изменения происходят.
which = 1, isChecked = false which = 0, isChecked = true which = 3, isChecked = true

Если есть необходимость, можно добавить в обработчик код, который обновлял бы массив chkd в соответствии с нажатиями. Индекс элемента и значение у нас есть.
Откроем диалог Cursor. Здесь ничего не выделено, т.к. в поле checked мы поместили нули.


Проставим галки,


лог это отобразит
which = 1, isChecked = true which = 3, isChecked = true
Это работает только потому, что мы вручную обновляем БД и курсор. Повторюсь, попробуйте закоментить код обработчика myCursorMultiClickListener и элементы перестанут выделяться.

Я не стал реализовывать метод onPrepareDialog. В случае Items, там все просто, аналогично прошлому уроку используйте такой код:
((AlertDialog)dialog).getListView().setItemChecked(2, true);
В этом примере: 2 – это позиция элемента списка, а true - означает, что галка должна стоять. Если хотите снять галку, передавайте false.

В случае с курсором код будет аналогичен коду из обработчика myCursorMultiClickListener. Меняете запись в БД методом db.changeRec, обновляете курсор и передаете его адаптеру.

Нетривиальная такая получилась штука, не знаю пригодится кому или нет, но раз уж взялся за диалоги - решил расписать и это.
Также наверно имеет смысл сказать, что у методов setItems, setSingleChoiceItems, setMultiChoiceItems есть также реализация, использующая не напрямую массив, а ID массива строк из файла ресурсов.


На следующем уроке:
- используем свои View для построения диалога
Присоединяйтесь к нам в Telegram:
- в канале StartAndroid публикуются ссылки на новые статьи с сайта startandroid.ru и интересные материалы с хабра, medium.com и т.п.
- в чатах решаем возникающие вопросы и проблемы по различным темам: Android, Compose, Kotlin, RxJava, Dagger, Тестирование, Performance
- ну и если просто хочется поговорить с коллегами по разработке, то есть чат Флудильня
