Урок 46. События ExpandableListView
29 декабря 2011
В этом уроке:
- обрабатываем события дерева-списка

Дерево-список строить мы умеем, теперь посмотрим, как с ним можно взаимодействовать. Нам предоставлена возможность обрабатывать следующие события: нажатие на группу, нажатие на элемент, сворачивание группы, разворачивание группы.

Создадим проект:
Project name: P0461_ExpandableListEvents Build Target: Android 2.3.3 Application name: ExpandableListEvents Package name: ru.startandroid.develop.p0461expandablelistevents Create Activity: MainActivity

Экран main.xml:
TextView для вывода информации и ExpandableListView.

В проекте, рядом с классом MainActivity создадим (не Activity) класс AdapterHelper. В него поместим код для заполнения списка, чтобы разгрузить MainActivity.java.
Код AdapterHelper.java:
Код создания адаптера полностью заимствован с прошлого урока. Чтобы получить адаптер нам надо будет просто вызвать метод getAdapter.
У класса есть конструктор, через который мы передаем объекту ссылку на context. Context нам понадобится, чтобы создать адаптер. Адаптеру же в свою очередь context нужен, например, для доступа к LayoutInflater.
В конце класса находятся методы, которые возвращают нам названия групп и элементов из коллекций по номеру группы или номеру элемента. Для этого используем методы адаптера getGroup и getChild, приводим их к Map и извлекаем значение атрибута с именем компании или телефона.

Пишем код в MainActivity.java:

Благодаря классу AdapterHelper, код создания адаптера занял всего две строчки: создание объекта и вызов метода getAdapter. Далее присваиваем адаптер списку и добавляем обработчики:
1) OnChildClickListener - нажатие на элемент
Метод  public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id), где
parent – ExpandableListView с которым работаем v – View элемента  groupPosition – позиция группы в списке childPosition – позиция элемента в группе id – id элемента
Мы выводим в лог позицию и id. А в TextView сверху от списка выводим текст нажатого элемента и его группы, который получаем с помощью методов AdapterHelper.
Метод должен вернуть boolean. Если мы возвращаем true – это значит, мы сообщаем, что сами полностью обработали событие и оно не пойдет в дальнейшие обработчики (если они есть). Если возвращаем false – значит, мы позволяем событию идти дальше.

2) OnGroupClickListener – нажатие на группу
Метод  public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id), где
parent – ExpandableListView с которым работаем v – View элемента  groupPosition – позиция группы в списке id – id группы
Мы выводим в лог позицию и id группы.
Этот метод также должен вернуть boolean. Мы будет возвращать true, если позиция группы = 1, иначе - false. Т.е. для этой группы мы блокируем дальнейшую обработку события. Далее увидим, что нам это даст.

3) OnGroupCollapseListener – сворачивание группы
Метод  onGroupCollapse(int groupPosition), где groupPosition – позиция группы, которую свернули

4) OnGroupExpandListener – разворачивание группы
Метод  onGroupExpand(int groupPosition), где groupPosition – позиция группы, которую развернули

И в конце кода MainActivity мы разворачиваем группу с позицией 2, используя метод expandGroup.

Все сохраним и запускаем.

Как видим, группа LG сразу развернута. Это сработала команда expandGroup в конце кода.
Если посмотреть в лог, то видим
onGroupExpand groupPosition = 2
Т.е. отработало событие разворачивания группы с позицией 2.

Нажмем, например, на Optimus Link. Смотрим лог:
onChildClick groupPosition = 2 childPosition = 1 id = 1
Не забываем, что позиция считается с нуля. Группа с позицией 2 – LG, элемент с позицией 1 – Optimus Link, все верно.
Смотрим TextView сверху экрана, он считал из адаптера значение атрибута и отобразил его.

Теперь попробуем свернуть группу LG, нажмем на нее. Смотрим лог:
onGroupClick groupPosition = 2 id = 2 onGroupCollapse groupPosition = 2
Сначала отработал onGroupClick – нажатие на группу, а потом onGroupCollapse – сворачивание группы. TextView наверху экрана оповестил о том, что свернули группу LG.

Снова развернем группу LG. Лог:
onGroupClick groupPosition = 2 id = 2 onGroupExpand groupPosition = 2
Нажатие на группу и разворачивание. Обратите внимание, что при программном разворачивании, события нажатия не было, только разворот.

Теперь попробуем развернуть группу с позицией 1 – Samsung. Группа не разворачивается. Смотрим лог:
onGroupClick groupPosition = 1 id = 1
Событие нажатия есть, а вот обработчик разворачивания не вызывается. Это происходит из-за строчки
Мы для группы с позицией 1 блокируем дальнейшую обработку события и оно не уходит в обработчики разворачивания или сворачивания. Поэтому и не срабатывает onGroupExpand.

В итоге эти 4 обработчика позволяют вам определять, как пользователь взаимодействует с деревом.
Присоединяйтесь к нам в Telegram:
- в канале StartAndroid публикуются ссылки на новые статьи с сайта startandroid.ru и интересные материалы с хабра, medium.com и т.п.
- в чатах решаем возникающие вопросы и проблемы по различным темам: Android, Compose, Kotlin, RxJava, Dagger, Тестирование, Performance
- ну и если просто хочется поговорить с коллегами по разработке, то есть чат Флудильня
