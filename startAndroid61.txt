Урок 62. Диалоги. AlertDialog. Список
05 марта 2012
В этом уроке:
- формируем список в диалоге

Некоторые методы, которые использовались в уроке, устарели. После его прочтения рекомендую прочесть актуальные уроки по темам:- создание диалогов с помощью фрагментов (уроки 104-105,110)-  работа с курсором через лоадер (уроки 135-136)

В диалог можно выводить не только текст, но и список значений. Диалоговый список может быть трех видов:
- без выбора элементов - с одиночным выбором - с множественным выбором
В этом уроке рассмотрим первый вид.
Научимся создавать диалог со списком, используя массив данных, адаптер или курсор. Кроме создания попробуем менять данные и обновлять список перед каждым показом. Для этого введем счетчик показов и будем показывать его в последней строке списка. Каждый вызов списка будет увеличивать счетчик на единицу и это должно отразиться в списке. Так мы убедимся, что он обновляется.

Создадим проект:
Project name: P0621_AlertDialogItems Build Target: Android 2.3.3 Application name: AlertDialogItems Package name: ru.startandroid.develop.p0621alertdialogitems Create Activity: MainActivity

В strings.xml пропишем тексты:

На экране main.xml три кнопки:


Для работы с БД выделим отдельный класс DB.java:
Тут все как обычно. Методы для открытия и закрытия подключения, получение курсора с данными, и изменение записи по ID. Таблица всего из двух полей – _id и txt. При создании вставляем в таблицу 4 записи.

MainActivity.java:
data – массив из 4 элементов. В таблице из DB.java у нас тоже 4 записи. Мы решили, что будем менять последний (четвертый) элемент/запись в данных и помещать туда кол-во показов.

В onCreate подключаемся к базе.

onclick – меняем значение счетчика и корректируем данные массива и БД,  и в зависимости от нажатой кнопки вызываем соответствующий диалог.

onCreateDialog – создаем вызываемый диалог, используя AlertDialog.Builder. Диалог может построить список, используя один из следующих объектов:
1) Массив строк. Используется метод setItems. На вход подается массив и обработчик нажатия.
2) Адаптер. Мы создаем ArrayAdapter, используя массив data и стандартный layout select_dialog_item, и передаем его в метод setAdapter. Также передаем туда и обработчик.
3) Курсор БД. Вызываем метод setCursor. Передаем туда курсор, обработчик нажатия и имя поля, значение которого будет показано в списке.
Кроме списка указываем только заголовок. Кнопки и иконку не добавляем. В конце создаем и возвращаем Dialog.

Метод создания диалога (onCreateDialog) выполняется один раз, чтобы создать диалог. При последующих показах диалога выполняется метод onPrepareDialog. В нем мы будем обновлять данные списка. С помощью преобразований и методов getListView и getAdapter получим список из диалога, а потом адаптер из списка.
Далее для диалогов, использующих массив и адаптер мы выполняем преобразование до BaseAdapter, чтобы иметь возможность вызвать метод notifyDataSetChanged. Этот метод обновит список в соответствии с новыми данными.
Для диалога с курсором нет необходимости уведомлять адаптер о новых данных. Курсор это делает сам.

myClickListener – обработчик нажатия на пункты списка. Он у нас общий для всех  диалогов и просто выводит в лог позицию нажатого пункта.

В changeCount увеличиваем счетчик на единицу и пишем это значение в четвертый элемент массива (нумерация с нуля) и в строку с _id = 4 в БД. Обновляем курсор.

В onDestroy закрываем подключение к БД.

Все сохраним и запустим. Повызываем диалоги и убедимся, что данные в них обновляются при каждом показе.








Клик на пункте списка задействует обработчик, выведет в лог его позицию и закроет диалог.
Если бы мы не реализовали метод onPrepareDialog, то списки диалогов (кроме курсорного) не обновлялись и выводили в последней строке те значения счетчика, при которых они создавались в методе onCreateDialog. Попробуйте закоментить содержимое onPrepareDialog и убедиться в этом.

UPD от 11.07.2012. Протестил этот урок на Android 3.2 - данные обновляются и без onPrepareDialog.

На следующем уроке:
- формируем список с одиночным выбором в диалоге
Присоединяйтесь к нам в Telegram:
- в канале StartAndroid публикуются ссылки на новые статьи с сайта startandroid.ru и интересные материалы с хабра, medium.com и т.п.
- в чатах решаем возникающие вопросы и проблемы по различным темам: Android, Compose, Kotlin, RxJava, Dagger, Тестирование, Performance
- ну и если просто хочется поговорить с коллегами по разработке, то есть чат Флудильня
